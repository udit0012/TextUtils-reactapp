{"version":3,"sources":["components/Alert.js","components/navbar.js","components/textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","message","Navbar","href","title","id","onClick","toggleMode","htmlFor","mode","Textform","useState","text","setText","words","setWords","useEffect","wordsarr","split","filter","ele","length","console","log","color","background","value","onChange","event","target","rows","disabled","toUpperCase","showAlert","toLowerCase","vcount","i","a","toFixed","defaultProps","App","setMode","setAlert","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.229e8273.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div style={{ height: \"50px\" }}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.message}</strong>\r\n            </div>}\r\n        </ div>\r\n            )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n// import Themebutton from '../Themebutton';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n            <nav className={`navbar navbar-expand-lg navbar-dark bg-dark`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                            </li>\r\n                        </ul>\r\n                        {/* <div className=\"me-5 d-flex align-items-center\">\r\n                            <h6 className=\"nav-link text-light\">Color Themes</h6>\r\n                            <Themebutton bgcolor = \"#1f0e57\" changeTheme={props.changeTheme}/>\r\n                            <Themebutton bgcolor = \"#470a0e\" changeTheme={props.changeTheme}/>\r\n                            <Themebutton bgcolor = \"#422c07\" changeTheme={props.changeTheme}/>\r\n                            <Themebutton bgcolor = \"#0a4214\" changeTheme={props.changeTheme}/>\r\n                            <Themebutton bgcolor = \"#3d043b\" changeTheme={props.changeTheme}/>\r\n                        </div> */}\r\n                        <div className=\"form-check form-switch\">\r\n                            <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                            <label className={`form-check-label text-light`} htmlFor=\"flexSwitchCheckDefault\">{props.mode===\"dark\"?\"Dark\":\"Light\"} Mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n                )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title:'Set title here'\r\n}\r\n","import React,{useState,useEffect} from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const [text, setText] = useState(\"\");  \r\n    const [words, setWords] = useState(0);\r\n\r\n    const handletoupper = ()=>{\r\n        // console.log(\"uppercase is clicked\" + text);\r\n        setText(text.toUpperCase());\r\n        props.showAlert(\"Text has been changed to Uppercase\",\"success\");\r\n    }\r\n    const handletolower = ()=>{\r\n        // console.log(\"uppercase is clicked\" + text);\r\n        setText(text.toLowerCase());\r\n        props.showAlert(\"Text has been changed to Lowercase\",\"success\");\r\n    }\r\n    const handleclear = ()=>{\r\n        // console.log(\"uppercase is clicked\" + text);\r\n        setText(\"\");\r\n        props.showAlert(\"Text has been Cleared\",\"success\");\r\n    }\r\n    const handlecountvowel = ()=>{\r\n        let vcount = 0;\r\n        // console.log(\"uppercase is clicked\" + text);\r\n        for(let i = 0;i<text.length;i++){\r\n            if(text[i]===\"a\" || text[i]===\"e\" || text[i]===\"i\" || text[i]===\"o\" || text[i]===\"u\" || text[i]===\"A\" || text[i]===\"E\" || text[i]===\"I\" || text[i]===\"O\" || text[i]===\"U\"){\r\n                vcount++;\r\n            }\r\n        }\r\n        alert(\"Your text has \" + vcount + \" vowels\");\r\n    }\r\n    const handleonchange = (event)=>{\r\n        // console.log(\"Value Changed\");\r\n        setText(event.target.value);\r\n        \r\n    }\r\n    useEffect(() => {\r\n        let wordsarr = text.split(\" \").filter(ele=>ele.length!==0)\r\n        text===\"\"?setWords(0):setWords(wordsarr.length)\r\n        console.log(\"aur bhai\")\r\n    }, [text,words]);\r\n    return (\r\n        <>\r\n        <div className=\"container mt-4\" style={{color : props.mode===\"dark\"?\"black\":\"white\"}}>\r\n            <h1 className= \"mb-3\">Enter the text to analyze below</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className={`form-control border-1 border-${props.mode}`} style={{background: \"transparent\",color:props.mode===\"dark\"?\"black\":\"white\"}} value={text} onChange = {handleonchange} id=\"exampleFormControlTextarea1\" rows=\"8\">    </textarea>\r\n            </div>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.mode} mx-1 my-1`} onClick ={handletoupper}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.mode} mx-1 my-1`} onClick ={handletolower}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.mode} mx-1 my-1`} onClick ={handleclear}>Clear text</button>\r\n            <button disabled={text.length===0} type=\"button\" className={`btn btn-${props.mode} mx-1 my-1`} onClick ={handlecountvowel}>Count number of vowels</button>\r\n        </div>\r\n        <div className=\"container mt-3\" style={{color : props.mode===\"dark\"?\"black\":\"white\"}}>\r\n            <h2>Words and Characters Count</h2>\r\n            <p>{text.split(\" \").filter((a)=>{return a.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{(words * 0.008).toFixed(4)} minutes to read above sentence </p>\r\n\r\n            <h2>Text Preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/navbar';\nimport Textform from './components/textform';\n\nfunction App() {\n  const [mode, setMode] = useState(\"dark\");\n  const togglemode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    }\n    else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n  // const changeTheme = (bgcolor)=>{\n  //   setMode(\"light\");\n  //   document.body.style.backgroundColor = bgcolor;\n  //   showAlert(\"Theme has been enabled\",\"success\"); \n  // }\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n  return (\n    <>\n        <Navbar title=\"MytextUtils\" mode={mode} toggleMode={togglemode} />\n        <Alert alert={alert} />\n        <div>\n              <Textform mode={mode} showAlert={showAlert} />\n        </div>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}